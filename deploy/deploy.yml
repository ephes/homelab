---
- hosts: macmini
  tasks:
    - name: "Include public vars"
      include_vars: vars.yml

    - name: "Include shared secret vars"
      include_vars: secrets.yml
      
    - name: "Include host-specific vars (loaded last to override)"
      include_vars: "host_vars/macmini.yml"

    - name: Check if uv is installed
      stat:
        path: "{{ uv_path }}"
      register: uv_installed
      
    - name: Fail if uv is not installed
      fail:
        msg: "UV is not installed. Please install uv first."
      when: not uv_installed.stat.exists

    - name: Add the unix user with a bash shell
      user:
        name: "{{ username }}"
        shell: /usr/bin/bash

    - name: Create site directory structure
      file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
        owner: "{{ username }}"
      loop:
        - "{{ site_path }}"
        - "{{ site_path }}/staticfiles"
        - "{{ django_cache_location }}"

    - name: Sync Django source code to macmini
      ansible.posix.synchronize:
        src: "{{ playbook_dir }}/../src"
        dest: "{{ site_path }}/"
        rsync_opts:
          - "--exclude=__pycache__"
          - "--exclude=*.pyc"
          - "--exclude=db.sqlite3"  # Don't overwrite the database
          - "--exclude=.env"
      become_user: "{{ username }}"

    - name: Copy manage.py to site directory
      copy:
        src: "{{ playbook_dir }}/../manage.py"
        dest: "{{ site_path }}/manage.py"
        mode: "0755"
        owner: "{{ username }}"

    - name: Copy pyproject.toml to site directory
      copy:
        src: "{{ playbook_dir }}/../pyproject.toml"
        dest: "{{ site_path }}/pyproject.toml"
        mode: "0644"
        owner: "{{ username }}"

    - name: Copy uv.lock to site directory
      copy:
        src: "{{ playbook_dir }}/../uv.lock"
        dest: "{{ site_path }}/uv.lock"
        mode: "0644"
        owner: "{{ username }}"

    - name: Create .env file
      template:
        src: templates/env.template.j2
        dest: "{{ site_path }}/.env"
        mode: "0600"
        owner: "{{ username }}"

    - name: Create virtualenv for python
      shell: "{{ uv_path }} venv"
      args:
        chdir: "{{ site_path }}"
      become_user: "{{ username }}"

    - name: Check if venv symlink already exists
      stat:
        path: "{{ site_path }}/venv"
      register: venv_link
      become_user: "{{ username }}"

    - name: Link .venv to venv
      shell: "ln -s .venv venv"
      args:
        chdir: "{{ site_path }}"
      become_user: "{{ username }}"
      when: not venv_link.stat.exists

    - name: Install dependencies with uv sync
      shell: "{{ uv_path }} sync --frozen"
      args:
        chdir: "{{ site_path }}"
      become_user: "{{ username }}"

    - name: Load .env file and run django migrations
      shell: |
        cd {{ site_path }}
        export $(cat .env | grep -v '^#' | xargs)
        {{ uv_path }} run python manage.py migrate
      args:
        executable: /bin/bash
      become_user: "{{ username }}"
      environment:
        DJANGO_SETTINGS_MODULE: "{{ django_settings_module }}"

    - name: Load .env file and run django collectstatic
      shell: |
        cd {{ site_path }}
        export $(cat .env | grep -v '^#' | xargs)
        {{ uv_path }} run python manage.py collectstatic --noinput
      args:
        executable: /bin/bash
      become_user: "{{ username }}"
      environment:
        DJANGO_SETTINGS_MODULE: "{{ django_settings_module }}"

    - name: Create systemd service unit file
      template:
        src: templates/systemd.service.j2
        dest: "{{ systemd_unit_path }}"

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Make sure granian service is running
      systemd:
        state: restarted
        name: "{{ username }}"
        enabled: yes

    - name: Check if service is running
      uri:
        url: "http://localhost:{{ app_port }}/"
        status_code: [200, 301, 302, 500]
        follow_redirects: no
      retries: 10
      delay: 2