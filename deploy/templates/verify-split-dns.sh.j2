#!/bin/bash
# Split-DNS Verification Script
# Generated by Ansible deployment

set -e

echo "================================================"
echo "         Split-DNS Verification Test"
echo "================================================"
echo ""

# Configuration
LAN_IP="{{ macmini_internal_ip }}"
TS_IP="{{ resolved_tailscale_ip | default(macmini_tailscale_ip) }}"
DOMAINS=(
    "home.wersdörfer.de"
    "paperless.home.wersdörfer.de"
    "ha.home.wersdörfer.de"
    "unifi.home.wersdörfer.de"
    "proxmox.home.wersdörfer.de"
    "portainer.home.wersdörfer.de"
    "pihole.home.wersdörfer.de"
    "router.home.wersdörfer.de"
    "traefik.home.wersdörfer.de"
)

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to check service status
check_service() {
    local service=$1
    if systemctl is-active --quiet $service; then
        echo -e "${GREEN}✓${NC} $service is running"
        return 0
    else
        echo -e "${RED}✗${NC} $service is not running"
        return 1
    fi
}

# Function to test DNS resolution
test_dns() {
    local server=$1
    local port=$2
    local domain=$3
    local expected=$4
    local description=$5
    
    result=$(dig @$server -p $port $domain +short 2>/dev/null | head -1)
    
    if [ "$result" == "$expected" ]; then
        echo -e "${GREEN}✓${NC} $description: $domain → $result"
        return 0
    else
        echo -e "${RED}✗${NC} $description: $domain → $result (expected: $expected)"
        return 1
    fi
}

# Start tests
echo "1. Service Status Check"
echo "-----------------------"
check_service pihole-FTL
check_service unbound
echo ""

echo "2. Port Availability Check"
echo "--------------------------"
if netstat -tunlp 2>/dev/null | grep -q ":53 "; then
    echo -e "${GREEN}✓${NC} Port 53 (DNS) is listening"
else
    echo -e "${RED}✗${NC} Port 53 (DNS) is not listening"
fi

if netstat -tunlp 2>/dev/null | grep -q ":5335 "; then
    echo -e "${GREEN}✓${NC} Port 5335 (Unbound) is listening"
else
    echo -e "${RED}✗${NC} Port 5335 (Unbound) is not listening"
fi
echo ""

echo "3. DNS Resolution Tests"
echo "-----------------------"

# Test via Pi-hole
echo "Testing via Pi-hole (port 53):"
for domain in "${DOMAINS[@]}"; do
    test_dns 127.0.0.1 53 "$domain" "$LAN_IP" "  Pi-hole"
done
echo ""

# Test direct Unbound - LAN view
echo "Testing Unbound LAN view (port 5335):"
test_dns 127.0.0.1 5335 "home.wersdörfer.de" "$LAN_IP" "  LAN view"
echo ""

# Test external domain resolution
echo "Testing external domain resolution:"
external_test=$(dig @127.0.0.1 -p 53 google.com +short 2>/dev/null | head -1)
if [ -n "$external_test" ]; then
    echo -e "${GREEN}✓${NC} External DNS: google.com → $external_test"
else
    echo -e "${RED}✗${NC} External DNS resolution failed"
fi
echo ""

echo "4. Configuration Files Check"
echo "----------------------------"
files=(
    "/etc/pihole/pihole.toml"
    "/etc/unbound/unbound.conf"
    "/etc/unbound/unbound.conf.d/00-base.conf"
    "/etc/unbound/unbound.conf.d/10-split-dns.conf"
    "/etc/unbound/unbound.conf.d/20-forward.conf"
)

for file in "${files[@]}"; do
    if [ -f "$file" ]; then
        echo -e "${GREEN}✓${NC} $file exists"
    else
        echo -e "${RED}✗${NC} $file missing"
    fi
done
echo ""

echo "5. Pi-hole Upstream Configuration"
echo "---------------------------------"
upstream=$(grep "upstreams = \[" /etc/pihole/pihole.toml -A 1 | grep -o "127.0.0.1#5335" || echo "not configured")
if [ "$upstream" == "127.0.0.1#5335" ]; then
    echo -e "${GREEN}✓${NC} Pi-hole is using Unbound as upstream (127.0.0.1#5335)"
else
    echo -e "${RED}✗${NC} Pi-hole upstream is not correctly configured"
fi
echo ""

echo "6. Summary"
echo "----------"
echo "Expected configuration:"
echo "  • LAN clients (192.168.178.0/24) → $LAN_IP"
echo "  • Tailscale clients (100.64.0.0/10) → $TS_IP"
echo "  • Services: Pi-hole → Unbound → External DNS"
echo ""

# Final status
if check_service pihole-FTL >/dev/null 2>&1 && check_service unbound >/dev/null 2>&1; then
    if [ "$upstream" == "127.0.0.1#5335" ]; then
        echo -e "${GREEN}✓ Split-DNS is fully operational!${NC}"
        exit 0
    else
        echo -e "${YELLOW}⚠ Services running but configuration needs attention${NC}"
        exit 1
    fi
else
    echo -e "${RED}✗ Split-DNS is not fully operational${NC}"
    exit 1
fi