#!/usr/bin/env bash
set -euo pipefail

# Configuration
ZONE="{{ ddns_domain }}"
NAME="{{ ddns_subdomain }}"
KEY="${GANDI_API_TOKEN}"  # From environment
LOG_FILE="{{ ddns_log_dir }}/ddns-home.log"

# Create log directory if it doesn't exist
mkdir -p "$(dirname "$LOG_FILE")"

# Function to log messages
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Get current public IPs
log "Starting DNS update check for ${NAME}.${ZONE}..."
IP4=$(curl -s --connect-timeout 10 https://ipv4.icanhazip.com || echo "")
IP6=$(curl -s --connect-timeout 10 https://ipv6.icanhazip.com || echo "")

log "Current IPv4: ${IP4:-not found}"
log "Current IPv6: ${IP6:-not found}"

# Check if we got at least one IP
if [ -z "${IP4:-}" ] && [ -z "${IP6:-}" ]; then
    log "ERROR: Could not determine any public IP address"
    exit 1
fi

# Gandi API endpoint
BASE="https://api.gandi.net/v5/livedns/domains/$ZONE/records/$NAME"

# Track if any updates were made
UPDATED=false

# Update IPv4 record
if [ -n "${IP4:-}" ]; then
    log "Updating IPv4 record..."
    RESPONSE=$(curl -sX PUT "$BASE/A" \
        -H "Authorization: Bearer $KEY" \
        -H "Content-Type: application/json" \
        -d "{\"rrset_ttl\":{{ ddns_ttl }},\"rrset_values\":[\"$IP4\"]}" \
        -w "\nHTTP_CODE:%{http_code}")
    
    HTTP_CODE=$(echo "$RESPONSE" | grep -oP 'HTTP_CODE:\K\d+' || echo "000")
    if [ "$HTTP_CODE" -eq 201 ] || [ "$HTTP_CODE" -eq 200 ]; then
        log "IPv4 record updated successfully to $IP4"
        UPDATED=true
    else
        log "ERROR: Failed to update IPv4 record. HTTP code: $HTTP_CODE"
        echo "$RESPONSE" | grep -v "HTTP_CODE:" >> "$LOG_FILE"
    fi
fi

# Update IPv6 record (if available)
if [ -n "${IP6:-}" ]; then
    log "Updating IPv6 record..."
    RESPONSE=$(curl -sX PUT "$BASE/AAAA" \
        -H "Authorization: Bearer $KEY" \
        -H "Content-Type: application/json" \
        -d "{\"rrset_ttl\":{{ ddns_ttl }},\"rrset_values\":[\"$IP6\"]}" \
        -w "\nHTTP_CODE:%{http_code}")
    
    HTTP_CODE=$(echo "$RESPONSE" | grep -oP 'HTTP_CODE:\K\d+' || echo "000")
    if [ "$HTTP_CODE" -eq 201 ] || [ "$HTTP_CODE" -eq 200 ]; then
        log "IPv6 record updated successfully to $IP6"
        UPDATED=true
    else
        log "ERROR: Failed to update IPv6 record. HTTP code: $HTTP_CODE"
        echo "$RESPONSE" | grep -v "HTTP_CODE:" >> "$LOG_FILE"
    fi
fi

if [ "$UPDATED" = true ]; then
    log "DNS update completed successfully"
else
    log "No DNS records were updated"
fi

# Rotate log if it's getting too large (>10MB)
if [ -f "$LOG_FILE" ] && [ $(stat -f%z "$LOG_FILE" 2>/dev/null || stat -c%s "$LOG_FILE") -gt 10485760 ]; then
    mv "$LOG_FILE" "${LOG_FILE}.old"
    log "Log rotated due to size"
fi