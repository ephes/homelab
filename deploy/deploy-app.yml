---
# Deploy homelab Django application
- hosts: macmini
  tasks:
    - name: "Include public vars"
      include_vars: vars.yml

    - name: "Include shared secret vars"
      include_vars: secrets.yml
      
    - name: "Include host-specific vars (loaded last to override)"
      include_vars: "host_vars/macmini.yml"

    - name: Check if uv is installed
      stat:
        path: "{{ uv_path }}"
      register: uv_installed
      
    - name: Fail if uv is not installed
      fail:
        msg: "UV is not installed. Please install uv first."
      when: not uv_installed.stat.exists

    - name: Add the unix user with a bash shell
      user:
        name: "{{ username }}"
        shell: /usr/bin/bash

    - name: Create site directory structure
      file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
        owner: "{{ username }}"
      loop:
        - "{{ site_path }}"
        - "{{ site_path }}/staticfiles"
        - "{{ django_cache_location }}"

    - name: Sync Django source code to macmini
      ansible.posix.synchronize:
        src: "{{ playbook_dir }}/../src"
        dest: "{{ site_path }}/"
        rsync_opts:
          - "--exclude=__pycache__"
          - "--exclude=*.pyc"
          - "--exclude=db.sqlite3"  # Don't overwrite the database
          - "--exclude=.env"
      become_user: "{{ username }}"

    - name: Copy manage.py to site directory
      copy:
        src: "{{ playbook_dir }}/../manage.py"
        dest: "{{ site_path }}/manage.py"
        mode: "0755"
        owner: "{{ username }}"

    - name: Copy pyproject.toml to site directory
      copy:
        src: "{{ playbook_dir }}/../pyproject.toml"
        dest: "{{ site_path }}/pyproject.toml"
        mode: "0644"
        owner: "{{ username }}"

    - name: Copy uv.lock to site directory
      copy:
        src: "{{ playbook_dir }}/../uv.lock"
        dest: "{{ site_path }}/uv.lock"
        mode: "0644"
        owner: "{{ username }}"

    - name: Create .env file
      template:
        src: templates/env.template.j2
        dest: "{{ site_path }}/.env"
        mode: "0600"
        owner: "{{ username }}"

    - name: Create virtualenv for python
      shell: "{{ uv_path }} venv"
      args:
        chdir: "{{ site_path }}"
      become_user: "{{ username }}"

    - name: Check if venv symlink already exists
      stat:
        path: "{{ site_path }}/venv"
      register: venv_link
      become_user: "{{ username }}"

    - name: Link .venv to venv
      shell: "ln -s .venv venv"
      args:
        chdir: "{{ site_path }}"
      become_user: "{{ username }}"
      when: not venv_link.stat.exists

    - name: Install dependencies with uv sync
      shell: "{{ uv_path }} sync --frozen"
      args:
        chdir: "{{ site_path }}"
      become_user: "{{ username }}"

    - name: Run Django migrations
      shell: "set -a && . {{ site_path }}/.env && set +a && {{ python }} manage.py migrate"
      args:
        chdir: "{{ site_path }}"
        executable: /bin/bash
      environment:
        DJANGO_SETTINGS_MODULE: "{{ django_settings_module }}"
      become_user: "{{ username }}"

    - name: Collect static files
      shell: "set -a && . {{ site_path }}/.env && set +a && {{ python }} manage.py collectstatic --noinput"
      args:
        chdir: "{{ site_path }}"
        executable: /bin/bash
      environment:
        DJANGO_SETTINGS_MODULE: "{{ django_settings_module }}"
      become_user: "{{ username }}"

    - name: Manage systemd unit for homelab
      template:
        src: templates/systemd.service.j2
        dest: "{{ systemd_unit_path }}"
      notify:
        - reload systemd
        - restart homelab
    
    # Add homelab-specific Traefik configuration
    - name: Ensure Traefik dynamic directory exists
      file:
        path: /etc/traefik/dynamic
        state: directory
        owner: root
        group: root
        mode: '0755'
      become: true
        
    - name: Deploy homelab Traefik configuration
      template:
        src: templates/homelab.traefik.yml.j2
        dest: "/etc/traefik/dynamic/homelab.yml"
        owner: root
        group: root
        mode: '0644'
      notify: reload traefik config
      become: true
      
  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes
        
    - name: restart homelab
      systemd:
        name: "{{ username }}"
        state: restarted
        enabled: yes
        
    - name: reload traefik config
      # Traefik automatically reloads when files in dynamic directory change
      debug:
        msg: "Traefik will automatically reload the configuration"